package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"unicode/utf8"

	"OzonTest/internal/entity"
	"OzonTest/internal/transport/graph/generated"
	"OzonTest/internal/transport/graph/model"
)

var maxLenCommentContent = 2000

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.PostInput) (*entity.Post, error) {
	return r.PostService.Create(ctx,
		entity.Post{
			UserID:    input.UserID,
			Content:   input.Content,
			Timestamp: input.Timestamp,
			IsOpen:    input.IsOpen})
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (bool, error) {
	err := r.PostService.Delete(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DisableComments is the resolver for the disableComments field.
func (r *mutationResolver) DisableComments(ctx context.Context, id int) (*entity.Post, error) {
	return r.PostService.DisableComments(ctx, id)
}

// EnableComments is the resolver for the enableComments field.
func (r *mutationResolver) EnableComments(ctx context.Context, id int) (*entity.Post, error) {
	return r.PostService.EnableComments(ctx, id)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CommentInput) (*entity.Comment, error) {
	if utf8.RuneCountInString(input.Content) > maxLenCommentContent {
		return &entity.Comment{}, entity.ErrBigContent
	}

	comment, err := r.CommentService.CreateComment(ctx,
		entity.Comment{
			PostID:    input.PostID,
			UserID:    input.UserID,
			Content:   input.Content,
			Timestamp: input.Timestamp,
		})

	if err != nil {
		r.SubscriptionService.NotifySubscribers(comment)
	}

	return comment, err
}

// CreateSubComment is the resolver for the createSubComment field.
func (r *mutationResolver) CreateSubComment(ctx context.Context, input model.RepCommentInput) (*entity.Comment, error) {
	if utf8.RuneCountInString(input.Content) > maxLenCommentContent {
		return &entity.Comment{}, entity.ErrBigContent
	}

	return r.CommentService.CreateRepComment(ctx, entity.Comment{
		ParentID:  &input.ParentID,
		PostID:    input.PostID,
		UserID:    input.UserID,
		Content:   input.Content,
		Timestamp: input.Timestamp,
	})
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id int) (bool, error) {
	err := r.CommentService.DeleteComment(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, filter *entity.PostFilter, limit *int, offset *int) ([]*entity.Post, error) {
	return r.PostService.GetAll(ctx, filter, entity.Pagination{Limit: limit, Offset: offset})
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int, limit *int, offset *int) (*entity.Post, error) {
	return r.PostService.GetById(ctx, id, entity.Pagination{Limit: limit, Offset: offset})
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, filter *entity.CommentFilter, limit *int, offset *int) ([]*entity.Comment, error) {
	return r.CommentService.GetAllComments(ctx, filter, entity.Pagination{Limit: limit, Offset: offset})
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id int, limit *int, offset *int) (*entity.Comment, error) {
	return r.CommentService.GetCommentById(ctx, id, entity.Pagination{Limit: limit, Offset: offset})
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, userID int, postID int) (<-chan *entity.Comment, error) {
	return r.SubscriptionService.Subscribe(ctx, userID, postID)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
